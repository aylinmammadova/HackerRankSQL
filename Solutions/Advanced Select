# 1. Type of Triangle
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
SELECT CASE 
WHEN (a >= b+c OR b >= a+c OR c >= a+b) THEN 'Not A Triangle'
WHEN (a=b AND b=c AND a=c) THEN 'Equilateral'
WHEN (a=b OR b=c OR a=c) THEN 'Isosceles'
ELSE 'Scalene' END
FROM triangles;

# 2. The PADS
Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical 
(i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and
[occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
Note: There will be at least two entries in the table for each type of occupation.
SELECT name||'('||SUBSTR(occupation,1,1)||')'
FROM occupations
ORDER BY name;
SELECT 'There are a total of '||COUNT(occupation)||' '||LOWER(occupation)||'s.'
FROM occupations
GROUP BY occupation
ORDER BY COUNT(occupation), occupation;

# 3. Binary Tree Nodes
You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
SELECT n, CASE
WHEN n NOT IN (SELECT DISTINCT p FROM bst WHERE p IS NOT NULL) THEN 'Leaf' 
WHEN p IS NULL THEN 'Root'
ELSE 'Inner' END
FROM bst
ORDER BY n;

# 4. New Companies
Write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees.
Order your output by ascending company_code.
Note:
The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.
SELECT c.company_code, c.founder, COUNT(DISTINCT lead_manager_code), COUNT(DISTINCT senior_manager_code), COUNT(DISTINCT manager_code), COUNT(DISTINCT employee_code)
FROM company c
JOIN employee e
ON c.company_code = e.company_code
GROUP BY c.company_code, c.founder
ORDER BY SUBSTR(c.company_code, 2);
