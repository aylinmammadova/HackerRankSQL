# 1. SQL Project Planning
You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. 
It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.
If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed.
Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. 
If there is more than one project that have the same number of completion days, then order by the start date of the project.
SELECT start_date, MIN(end_date)
FROM (SELECT start_date 
      FROM projects 
      WHERE start_date NOT IN (SELECT end_date 
                               FROM projects)
     ),
     (SELECT end_date 
      FROM projects 
      WHERE end_date NOT IN (SELECT start_Date 
                             FROM projects)
     )
WHERE start_date < end_date
GROUP BY start_date
ORDER BY MIN(end_date) - start_date ASC, start_date ASC;

# 2. Placements
You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. 
Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month).
Write a query to output the names of those students whose best friends got offered a higher salary than them. 
Names must be ordered by the salary amount offered to the best friends. 
It is guaranteed that no two students got same salary offer.
SELECT my_name
FROM (SELECT s.id my_id, s.name my_name, p.salary my_salary
     FROM students s
     JOIN packages p
     ON s.id = p.id) my_table
JOIN (SELECT f.id f_id, f.friend_id, p.salary friend_salary
     FROM friends f
     JOIN packages p
     ON f.friend_id = p.id) friend_table
ON my_id = f_id
WHERE friend_table.friend_salary > my_table.my_salary
ORDER BY friend_salary;

# 3. Symmetric Pairs
You are given a table, Functions, containing two columns: X and Y.
Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 â‰¤ Y1.
SELECT f1.x, f1.y
FROM functions f1, functions f2
WHERE f1.x <= f1.y
AND f1.x = f2.y
AND f2.x = f1.y
GROUP BY f1.x, f1.y
HAVING COUNT(CASE WHEN f1.x = f1.y THEN f1.x END) > 2
OR COUNT(CASE WHEN f1.x < f1.y THEN f1.x END) = 1
ORDER BY f1.x, f1.y;

# 4. Interviews
Samantha interviews many candidates from different colleges using coding challenges and contests. 
Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. 
Exclude the contest from the result if all four sums are 0.
Note: A specific contest can be used to screen candidates at more than one college, but each college only holds 1 screening contest.
SELECT con.contest_id,
        con.hacker_id, 
        con.name, 
        SUM(total_submissions), 
        SUM(total_accepted_submissions), 
        SUM(total_views),
        SUM(total_unique_views)
FROM contests con
JOIN colleges col ON con.contest_id = col.contest_id 
JOIN challenges ch ON col.college_id = ch.college_id 
LEFT JOIN (SELECT 
                challenge_id,
                SUM(total_views) total_views,
                SUM(total_unique_views) total_unique_views
            FROM view_stats
            GROUP BY challenge_id) vs
ON ch.challenge_id = vs.challenge_id 
LEFT JOIN (SELECT
                challenge_id,
                SUM(total_submissions) total_submissions,
                SUM(total_accepted_submissions) total_accepted_submissions
            FROM submission_stats
            GROUP BY challenge_id) ss
ON ch.challenge_id = ss.challenge_id
GROUP BY con.contest_id, con.hacker_id, con.name
HAVING SUM(total_submissions)!=0
OR SUM(total_accepted_submissions)!=0
OR SUM(total_views)!=0
OR SUM(total_unique_views)!=0
ORDER BY contest_id;

# 5. 15 Days of Learning SQL
Julia conducted a 15 days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016.
Write a query to print total number of unique hackers who made at least 1 submission each day (starting on the first day of the contest), 
and find the hacker_id and name of the hacker who made maximum number of submissions each day. 
If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. 
The query should print this information for each day of the contest, sorted by the date.








